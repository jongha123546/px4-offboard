cmake_minimum_required(VERSION 3.8)
project(drone_control)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
# uncomment the following section in order to fill in
# further dependencies manually.
# find_package(<dependency> REQUIRED)
find_package(ament_cmake REQUIRED)
find_package(builtin_interfaces REQUIRED)
find_package(eigen3_cmake_module REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(px4_msgs REQUIRED)
find_package(rclcpp REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(Fields2Cover REQUIRED)
find_package(nav_msgs REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)
find_package(px4_ros_com REQUIRED)

#################
# Setup targets #
#################

# Drone control node
add_executable(drone_control src/drone_control.cpp)
ament_target_dependencies(drone_control rclcpp px4_msgs geometry_msgs nav_msgs tf2_geometry_msgs
                          Eigen3 px4_ros_com)
install(TARGETS drone_control DESTINATION lib/${PROJECT_NAME})

# Path planning node
add_executable(path_planning src/path_planning.cpp)
target_link_libraries(path_planning Fields2Cover) # Link Fields2Cover library
ament_target_dependencies(path_planning rclcpp geometry_msgs Fields2Cover nav_msgs
                          tf2_geometry_msgs px4_msgs px4_ros_com Eigen3)
install(TARGETS path_planning DESTINATION lib/${PROJECT_NAME})

# target_include_directories(drone_control PUBLIC
#     $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
#     $<INSTALL_INTERFACE:include>)
# target_compile_features(drone_control PUBLIC c_std_99 cxx_std_17)  # Require C99 and C++17

############
# Install ##
############

# Export information to downstream packages
ament_export_dependencies(ament_cmake rclcpp rosidl_default_runtime eigen3_cmake_module Eigen3
                          px4_msgs geometry_msgs sensor_msgs Fields2Cover nav_msgs
                          tf2_geometry_msgs px4_ros_com)

ament_export_include_directories(include)

# Install launch files.
install(DIRECTORY launch DESTINATION share/${PROJECT_NAME}/)

############
# Testing ##
############

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()